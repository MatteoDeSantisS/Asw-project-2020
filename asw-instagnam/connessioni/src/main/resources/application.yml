# application.yml
--- 
spring: 
  application: 
    name: connessioni
  cloud:
    consul:
      host: localhost
      port: 8500
      discovery: 
        instanceId: ${spring.application.name}-${spring.cloud.client.hostname}-${random.value}
        healthCheckPath: /actuator/health
        healthCheckInterval: 10s
        # configurazione per effettuare esprimenti, NON USARE UN PRODUZIONE 
        # dopo quanto tempo consul deve smettere di restituire servizi che non rispondono all'health check? 
        healthCheckCriticalTimeout: 60s
        # consul deve restituire solo servizi che passano l'health check (default=false) 
        queryPassing: true 
    loadbalancer: 
      ribbon.enabled: false 

server: 
  port: ${PORT:${SERVER_PORT:0}}
#  port: 8080

# fa il logging dei comandi sql eseguiti 
#spring.jpa.show-sql: true
# disable OSIV
spring.jpa.open-in-view: false

# fa il logging dei comandi sql eseguiti
#spring.jpa.show-sql=true
spring.jpa.show-sql: false


  # POSTGRESQL
  spring.jpa.database: POSTGRESQL
  # spring.jpa.hibernate.ddl-auto=create
  spring.jpa.hibernate.ddl-auto: create-drop
  spring.datasource.platform: postgres
  spring.datasource.url: jdbc:postgresql://${DOCKER_HOST_IP:localhost}/restaurantservice # da modificare
  spring.datasource.username: postgres
  spring.datasource.password: postgres
  #spring.datasource.driver.class.name=org.postgresql.Driver
  spring.jpa.properties.hibernate.dialect: org.hibernate.dialect.PostgreSQL82Dialect
  spring.jpa.hibernate.use-new-id-generator-mappings: true
  # rimuove un warning noioso: see https://github.com/spring-projects/spring-boot/issues/12007
  spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation: true

  # KAFKA
  spring.kafka.bootstrap-servers: ${DOCKER_HOST_IP:10.11.1.121}:9092
  spring.kafka.consumer.group-id: ${spring.application.name}
  spring.kafka.consumer.auto-offset-reset: earliest
  spring.kafka.producer.key-serializer: org.apache.kafka.common.serialization.StringSerializer
  spring.kafka.producer.value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
  spring.kafka.consumer.key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  spring.kafka.consumer.value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
  spring.kafka.consumer.properties.spring.json.trusted.packages: *